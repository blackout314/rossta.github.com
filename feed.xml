<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rosskaff.com</title>
  <subtitle>Ross Kaffenberger</subtitle>
  <id>http://rosskaff.com/</id>
  <link href="http://rosskaff.com/"/>
  <link href="http://rosskaff.com/feed.xml" rel="self"/>
  <updated>2014-02-01T00:00:00Z</updated>
  <author>
    <name>Ross Kaffenberger</name>
  </author>
  <entry>
    <title>Automatic Backups to Amazon S3 are Easy</title>
    <link rel="alternate" href="/blog/2014/02/automatic-backups-to-amazon-s3-are-easy.html"/>
    <id>/blog/2014/02/automatic-backups-to-amazon-s3-are-easy.html</id>
    <published>2014-02-01T00:00:00Z</published>
    <updated>2014-02-01T00:00:00Z</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html"></summary>
    <content type="html">&lt;p&gt;You have good reason to backup your files. Amazon S3 is a cost-effective storage option. It doesn&amp;#39;t take the place of a dedicated drive that you own, it can be useful for redundancy nonetheless. With a few easy command-line steps (plus some pre-requisites), you can set up your machine to automate backups to S3 in no time.&lt;/p&gt;

&lt;h2&gt;Pre-requisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;An &lt;a href="http://aws.amazon.com/"&gt;Amazon web services account&lt;/a&gt; and &lt;a href="http://aws.amazon.com/iam/"&gt;your Amazon access credentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s3cmd&lt;/code&gt;: command line interface to S3.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cron&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;cron&lt;/code&gt; is pretty standard on unix-based systems. As of this writing, &lt;code&gt;s3cmd&lt;/code&gt; should be straightforward:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Mac users
$ brew install s3cmd

# Linux
$ yum install s3cmd
# or
$ apt-get install s3cmd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Optional:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gpg&lt;/code&gt;: opensource encryption program&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Setup&lt;/h2&gt;

&lt;p&gt;First you&amp;#39;ll need to configure s3cmd: &lt;code&gt;s3cmd --configure&lt;/code&gt;. Have your Amazon access key and secret key at the ready.&lt;/p&gt;

&lt;p&gt;If you plan to store sensitive data on S3, enter the path to your &lt;code&gt;gpg&lt;/code&gt; executable; &lt;code&gt;s3cmd&lt;/code&gt; will encrypt your data before transferring from your machine to S3. It also decrypts when downloading to your machine. Keep in mind, encrypted files won&amp;#39;t be readable by others with direct access.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a sample result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ s3cmd --configure

Enter new values or accept defaults in brackets with Enter.
Refer to user manual for detailed description of all options.

Access key and Secret key are your identifiers for Amazon S3
Access Key: xxxxxxxxxxxxxxxxxxxx
Secret Key: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

Encryption password is used to protect your files from reading
by unauthorized persons while in transfer to S3
Encryption password: xxxxxxxxxx
Path to GPG program: /usr/local/bin/gpg

When using secure HTTPS protocol all communication with Amazon S3
servers is protected from 3rd party eavesdropping. This method is
slower than plain HTTP and can&amp;#39;t be used if you&amp;#39;re behind a proxy
Use HTTPS protocol [No]: Yes

New settings:
  Access Key: xxxxxxxxxxxxxxxxxxxx
  Secret Key: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  Encryption password: xxxxxxxxxx
  Path to GPG program: /usr/local/bin/gpg
  Use HTTPS protocol: True
  HTTP Proxy server name:
  HTTP Proxy server port: 0

Test access with supplied credentials? [Y/n] Y
Please wait...
Success. Your access key and secret key worked fine :-)

Now verifying that encryption works...
Success. Encryption and decryption worked fine :-)

Save settings? [y/N] y
Configuration saved to &amp;#39;$HOME/.s3cfg&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Backup&lt;/h2&gt;

&lt;p&gt;Now all you need is a file to backup and an S3 bucket to store it.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say you&amp;#39;re a web developer like me and you want to back up your MySQL or Postgres development data. First, generate the backup file (you may need to add database credentials command-line options, of course):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mysql
$ mysqldump my_app_development &amp;gt; backup-`date +%Y-%m-%d`.sql

# or postgres
$ pg_dump my_app_development &amp;gt; backup-`date +%Y-%m-%d`.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use &lt;code&gt;s3cmd&lt;/code&gt; to create a bucket. This is essentially a top-level directory in your S3 account. Since bucket names must be using to &lt;em&gt;all&lt;/em&gt; S3 users, you won&amp;#39;t be able to call it something like &amp;ldquo;backups&amp;rdquo;. It&amp;#39;s helpful to use a prefix like your email or handle.&lt;/p&gt;

&lt;p&gt;Creates an S3 bucket called &amp;#39;myname-backups&amp;#39;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ s3cmd mb s3://myname-backups
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you&amp;#39;re ready to deliver. Encrypt and send your sql dump file to your new S3 bucket:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ s3cmd put backup-2014-02-01.sql s3://myname-backups/backup-2014-02-01.sql --encrypt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can verify it&amp;#39;s in the bucket:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ s3cmd ls s3://myname-backups/
2014-02-01 22:32   1109702   s3://myname-backups/test/backup-2014-02-01.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And retrieve it (with automatic decryption when performed on your machine):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s3cmd get s3://myname-backups/backup-2014-02-01.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;s3cmd&lt;/code&gt; supports a wide range of configuration options beyond those entered during the setup phase.Once set, your global configuration is editable in your &lt;code&gt;.s3cfg&lt;/code&gt; file, typically saved in your home directory. You can also set options at the command line.&lt;/p&gt;

&lt;h2&gt;Automate&lt;/h2&gt;

&lt;p&gt;Backups are all good but performing backups on a regular basis is even better. Like saving money, to get done when automated. Let&amp;#39;s add a cron task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash

TIMESTAMP=$(date +%Y-%m-%d)
TEMP_FILE=$(mktemp tmp.XXXXXXXXXX)
S3_FILE=&amp;quot;s3://myname-backups/local/data/backup-$TIMESTAMP&amp;quot;
pg_dump directory_development &amp;gt; $TEMP_FILE
s3cmd put $TEMP_FILE $S3_FILE --encrypt
rm &amp;quot;$TEMP_FILE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save this in a directory for your local scripts, like &lt;code&gt;$HOME/bin/database_backup.sh&lt;/code&gt; and add execute permissions with &lt;code&gt;chmod +x ~/bin/database_backup.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To edit your crontab, &lt;code&gt;crontab -e&lt;/code&gt;, and set it to run everyday at 10PM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Backup database to S3 daily
* 22 * * * /Users/myname/bin/database_backup.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Easy, right?&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Configuring Rack Test Driver in Capybara 2</title>
    <link rel="alternate" href="/blog/2013/03/configuring-rack-test-driver-in-capybara-2.html"/>
    <id>/blog/2013/03/configuring-rack-test-driver-in-capybara-2.html</id>
    <published>2013-03-26T00:00:00Z</published>
    <updated>2013-03-26T00:00:00Z</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html"></summary>
    <content type="html">&lt;p&gt;First of all, I don&amp;#39;t recommended excessive redirects.&lt;/p&gt;

&lt;p&gt;Sometimes though, you need more than 5 in your Capybara specs; this is the default redirect limit for &lt;a href="https://github.com/jnicklas/capybara"&gt;Capybara&lt;/a&gt;. When you exceed this limit, you get a dreaded &lt;code&gt;Capybara::InfiniteRedirectError&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In Capybara 2.0+, this limit is configurable:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;Capybara.register_driver :rack_test do |app|
  Capybara::RackTest::Driver.new app, \
    redirect_limit: 15,
    follow_redirects: true,
    respect_data_method: true
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Register a new instance of the rack test driver with options, as shown above. If you&amp;#39;re on Rails, it may be necessary for you to set &lt;code&gt;:respect_data_method&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;; this instructs capybara to simulate the request method specified via data-method attributes in your link. With Rails, an extension like &lt;a href="https://github.com/rails/jquery-ujs"&gt;rails/jquery-ujs&lt;/a&gt; allows you to enable additional request methods via unobtrusive javascript in real browsers. This setting currently defaults to false in the RackTest driver; one of the primary configurations in &lt;a href="https://github.com/jnicklas/capybara/blob/master/lib/capybara/rails.rb"&gt;&lt;code&gt;capybara/rails&lt;/code&gt;&lt;/a&gt; is to set this option. So&amp;hellip; you may be surprised if you omit this option and suddenly get missing route exceptions in your specs.&lt;/p&gt;

&lt;p&gt;The best long term solution for you and your users is to figure out how to reduce or eliminate unnecessary redirects. Playing with the redirect limit in your test environment may be a good way to identify potential problem areas of your app.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Why I Ditched Wordpress for Github</title>
    <link rel="alternate" href="/blog/2013/03/why-i-ditched-wordpress-for-github.html"/>
    <id>/blog/2013/03/why-i-ditched-wordpress-for-github.html</id>
    <published>2013-03-25T00:00:00Z</published>
    <updated>2013-03-25T00:00:00Z</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html"></summary>
    <content type="html">&lt;p&gt;By statistics alone, Wordpress is a winner. According to the &lt;a href="http://en.wikipedia.org/wiki/WordPress"&gt;stats on Wikipedia&lt;/a&gt;, it is a clear favorite amongst the top and new websites worldwide. The sheer volume of options for plugins, themes and customizations are enough to make it worthwhile as a content platform; the admin tools make editing and publishing a breeze.&lt;/p&gt;

&lt;p&gt;And yet, yesterday, I ditched Wordpress. This site is now hosted on &lt;a href="http://pages.github.com/"&gt;Github Pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So why switch? There are a few reasons. For one, site performance benefits of Pages over Wordpress have been &lt;a href="http://mbmccormick.com/2011/10/ditching-wordpress-for-jekyll-and-github/"&gt;well-documented&lt;/a&gt;. Now I don&amp;#39;t have to worry about &lt;a href="http://go.janleow.com/2011/06/my-wordpress-website-in-bluehost-is.html"&gt;Bluehost suspending my service&lt;/a&gt; anymore. Pages is free. There&amp;#39;s also my personal distaste for PHP, though it hasn&amp;#39;t stopped me from hacking on my pages here and there.&lt;/p&gt;

&lt;p&gt;There is, however, a more fundamental reason, illustrated when I ran into a close friend recently. My friend is brilliant and well-regarded in his field (finance). When he remarked on that fact that I had built my own website, my first thought was &amp;ldquo;Well, not really&amp;hellip;&amp;rdquo;, though I said something more like &amp;ldquo;Thanks!&amp;rdquo; My friend and most people don&amp;#39;t care if a website runs on Wordpress, Django, .Net or C#&amp;hellip; but I do. If the general sentiment on Hacker News is any indication, most developers care as well. Many of us got into programming because we saw something that amazed us and we desperately wanted to know &lt;em&gt;how&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To host on Github Pages means for me &lt;a href="https://help.github.com/articles/creating-project-pages-manually"&gt;using git&lt;/a&gt;, hand-crafting html and writing markdown in my editor of choice, building with &lt;a href="http://jekyllrb.com/"&gt;tools&lt;/a&gt; written in languages I love, and rolling my own theme built on &lt;a href="http://foundation.zurb.com/"&gt;CSS frameworks&lt;/a&gt; I like. It&amp;#39;s a better representation of what I do and how I prefer to do it. Using Wordpress has always felt a bit disingenuous. And that&amp;#39;s why I made the change.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Create and Deploy an Ember App in 5 Minutes</title>
    <link rel="alternate" href="/blog/2013/03/create-and-deploy-an-ember-app-in-5-minutes.html"/>
    <id>/blog/2013/03/create-and-deploy-an-ember-app-in-5-minutes.html</id>
    <published>2013-03-01T00:00:00Z</published>
    <updated>2013-03-01T00:00:00Z</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;The &lt;a href="https://github.com/emberjs/ember-rails"&gt;ember-rails&lt;/a&gt; gem is a great way to get started with &lt;a href="http://emberjs.com/"&gt;Ember.js&lt;/a&gt; in a Rails project. Another approach is to create and serve an Ember app on a static webpage, totally decoupled from the backend environment. It would be great to have some of the modern...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;The &lt;a href="https://github.com/emberjs/ember-rails"&gt;ember-rails&lt;/a&gt; gem is a great way to get started with &lt;a href="http://emberjs.com/"&gt;Ember.js&lt;/a&gt; in a Rails project. Another approach is to create and serve an Ember app on a static webpage, totally decoupled from the backend environment. It would be great to have some of the modern front-end development tools we get with something like Rails in a static web environment. A great project to consider for this is &lt;a href="http://middlemanapp.com/"&gt;Middleman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Middleman is a static website generator enhanced with some key tools like the asset pipeline. It works really well as an alternative to &lt;a href="https://github.com/mojombo/jekyll"&gt;Jekyll&lt;/a&gt; for rolling a blog. It’s comparable to &lt;a href="http://yeoman.io/"&gt;Yeoman&lt;/a&gt; for the benefits it provides for the front-end workflow, though the underlying tools both are quite different. Middleman builds on top of Rack and Sinatra, so you can take advantage of Rack middleware in development or deployment.&lt;/p&gt;

&lt;p&gt;To install middleman:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ gem install middleman&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A key feature for getting up and running quickly with Middleman are its use of project templates. You can use some out-of-the-box templates for setting up a Middleman project with the &lt;a href="http://html5boilerplate.com/"&gt;HTML5 Boilerplate&lt;/a&gt;. I’ve got a fork of an &lt;a href="https://github.com/rossta/middleman-ember-template"&gt;Ember app template&lt;/a&gt; that you can download or clone into &lt;code&gt;~/.middleman/&lt;/code&gt; to get up and running with ember-1.0.0-rc1 with ember-data. To start a new Middleman project with my ember template:&lt;/p&gt;

&lt;p&gt;
$ git clone git://github.com/rossta/middleman-ember-template.git ~/.middleman/ember&lt;/p&gt;

&lt;p&gt;$ middleman init my&lt;em&gt;new&lt;/em&gt;project &amp;ndash;template=ember&lt;/p&gt;

&lt;p&gt;$ middleman server
&lt;/p&gt;

&lt;p&gt;If everything worked, you should be able to navigate to http://localhost:4567 to see Hello World generated with Ember.&lt;/p&gt;

&lt;p&gt;There are lots of options for deploying a Middleman app. To deploy easily with Heroku, we can use a &lt;a href="https://devcenter.heroku.com/articles/buildpacks"&gt;buildpack&lt;/a&gt;. Buildpacks are scripts that take advantage of hooks provided by the Heroku build process and also us to customize what happens when we run “git push heroku master”. For the app generated from my ember template, we’ll want this process to build the Middleman app, which will minify assets and provide cacheable asset urls through the asset pipeline, and serve it on Rack using the &lt;a href="https://github.com/rack/rack-contrib/blob/master/lib/rack/contrib/try_static.rb"&gt;Rack::TryStatic&lt;/a&gt; middleware. Luckily, there are already some buildpacks out there that fit these requirements. It’s easy to configure our Heroku app to use a custom buildpack via a git url&lt;/p&gt;

&lt;p&gt;
$ heroku create my_app &amp;ndash;buildpack git://github.com/indirect/heroku-buildpack-middleman.git&lt;/p&gt;

&lt;p&gt;$ git push heroku master
&lt;/p&gt;

&lt;p&gt;If everything worked, you should be able to see your static web Ember app served up on Heroku.&lt;/p&gt;

&lt;p&gt;I gave a quick lightning talk on this topic at the &lt;a href="http://www.meetup.com/EmberJS-NYC/events/100237642/"&gt;Ember.js NYC Meetup&lt;/a&gt; yesterday. Check out the slides, &lt;a href="https://speakerdeck.com/rossta/create-and-deploy-an-ember-app-in-5-minutes"&gt;also on Speaker Deck&lt;/a&gt;&lt;/p&gt;

&lt;script class="speakerdeck-embed" data-id="974b0d70647701301b1e12313b100525" data-ratio="1.29456384323641" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;
</content>
  </entry>
  <entry>
    <title>Presentation Intro to Javascript MVC</title>
    <link rel="alternate" href="/blog/2012/02/presentation-intro-to-javascript-mvc.html"/>
    <id>/blog/2012/02/presentation-intro-to-javascript-mvc.html</id>
    <published>2012-02-09T00:00:00Z</published>
    <updated>2012-02-09T00:00:00Z</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;Today, I made a brown bag case to my colleagues: let’s approach client-side development in a more structured, disciplined and flexible way; in other words, add a model-view-controller javascript layer to our web app. Included is some background for...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Today, I made a brown bag case to my colleagues: let’s approach client-side development in a more structured, disciplined and flexible way; in other words, add a model-view-controller javascript layer to our web app. Included is some background for the discussion and a brief introduction to Backbone.js. I use the phrase MV+ to embrace various implementations of MVC-like javascript frameworks, most of which have different takes on what object take on the responsibility for hooking up models and views.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://daftpunkjs.heroku.com/"&gt;Brown Bag Presentation: Javascript MV+&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Toggle Rails Caching in RSpec Suites</title>
    <link rel="alternate" href="/blog/2011/12/toggle-rails-caching-in-rspec-suite.html"/>
    <id>/blog/2011/12/toggle-rails-caching-in-rspec-suite.html</id>
    <published>2011-12-22T00:00:00Z</published>
    <updated>2011-12-22T00:00:00Z</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;A useful feature of RSpec is the ability to pass metadata to tests and suites. You may already be familiar with examples in &lt;a href="https://github.com/jnicklas/capybara"&gt;Capybara&lt;/a&gt;, such as passing &lt;code&gt;:js&lt;/code&gt; to enable the javascript driver for a given spec. You may reach a point in the maturity of your...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;A useful feature of RSpec is the ability to pass metadata to tests and suites. You may already be familiar with examples in &lt;a href="https://github.com/jnicklas/capybara"&gt;Capybara&lt;/a&gt;, such as passing &lt;code&gt;:js&lt;/code&gt; to enable the javascript driver for a given spec. You may reach a point in the maturity of your test suite when it makes sense add your own configuration options.&lt;/p&gt;

&lt;p&gt;Once you introduce caching in your view layer, it can be easy for bugs to crop up around expiry logic. Since the Rails test environment ships with controller caching disabled, it may be useful to be able to toggle it on/off during the test run. To provide an optional caching mechanism for your specs, configure an around block:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;RSpec.configure do |config|
  config.around(:each, :caching) do |example|
    caching = ActionController::Base.perform_caching
    ActionController::Base.perform_caching = example.metadata[:caching]
    example.run
    ActionController::Base.perform_caching = caching
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The around block takes the RSpec example object as an argument. The block is triggered when :caching is detected as a key in an example’s metadata. The example object provides a number of methods for test introspection, allowing you to make changes before and after calling run to execute the spec. Here, we are storing the previously set value of &lt;code&gt;ActionContoller::Base.perform_caching&lt;/code&gt;, setting it for the local suite, and setting it back to the original value after it completes.&lt;/p&gt;

&lt;p&gt;As a result, we now have a simple, explicit mechanism for introducing caching to individual specs and suites:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;describe &amp;quot;visit the homepage&amp;quot;, :caching =&amp;gt; true do
  # test cached stuff
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Happy testing.&lt;/p&gt;
</content>
  </entry>
</feed>
