<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rossta.net</title>
  <subtitle>Ross Kaffenberger</subtitle>
  <id>https://rossta.net/</id>
  <link href="https://rossta.net/"/>
  <link href="https://rossta.net/feed.xml" rel="self"/>
  <updated>2015-11-20T19:00:00-05:00</updated>
  <author>
    <name>Ross Kaffenberger</name>
  </author>
  <entry>
    <title>Infinite Sequences in Ruby</title>
    <link rel="alternate" href="/blog/infinite-sequences-in-ruby.html"/>
    <id>/blog/infinite-sequences-in-ruby.html</id>
    <published>2015-11-20T19:00:00-05:00</published>
    <updated>2015-11-20T19:00:00-05:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;Functional languages like Clojure have &lt;a href="http://clojure.org/sequences"&gt;sequences&lt;/a&gt;. Sequences are pretty amazing: they let us treat algorithms as data structures. We can call functions on the data as it is produced, allowing us to interact with the results like a collection even when...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Functional languages like Clojure have &lt;a href="http://clojure.org/sequences"&gt;sequences&lt;/a&gt;. Sequences are pretty amazing: they let us treat algorithms as data structures. We can call functions on the data as it is produced, allowing us to interact with the results like a collection even when the sequence is infinite.&lt;/p&gt;

&lt;p&gt;The Ruby standard library doesn’t have an official sequence class or module, but we can get pretty far with the &lt;code&gt;Enumerable&lt;/code&gt; module. Rubyists are typically introduced to &lt;code&gt;Enumerable&lt;/code&gt; through methods on &lt;code&gt;Array&lt;/code&gt;,  like &lt;code&gt;#map&lt;/code&gt; and &lt;code&gt;#select&lt;/code&gt;. Arrays like &lt;code&gt;[1,2,3,4]&lt;/code&gt; may be thought of as finite, eagerly loaded sequences; they already contains all the members we want to enumerate with methods. We can also extend this API to sequences like “give me multiples of 5” in Ruby.&lt;/p&gt;

&lt;h3&gt;Enumerable Fibonacci&lt;/h3&gt;

&lt;p&gt;Consider an infinite sequence like fibonacci. We could create a method that generates the first &lt;code&gt;n&lt;/code&gt; fibonacci members given &lt;code&gt;n&lt;/code&gt; as a paramter. This implementation could look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;def eager_fibonacci(n)
  a = b = 1
  result = []

  loop do
    break if result.size &amp;gt;= n

    result &amp;lt;&amp;lt; a
    a, b = b, a + b
  end

  result
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works, but we can go one step further. Instead of returning an eagerly-loaded array, we can return an &lt;code&gt;Enumerator&lt;/code&gt;. We&amp;rsquo;ll yield each member to the &lt;code&gt;Enumerator&lt;/code&gt; as it is generated.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;def fibonacci
  Enumerator.new do |y|
    a = b = 1

    loop do
      y &amp;lt;&amp;lt; a
      a, b = b, a + b
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What the heck is an &lt;code&gt;Enumerator&lt;/code&gt;? It’s an enumerable object that can be used for either internal or external enumeration of a collection - for more details, check out my &lt;a href="https://rossta.net/blog/what-is-enumerator.html"&gt;previous post&lt;/a&gt;. The &lt;code&gt;Enumerator&lt;/code&gt; initialize method take a block that acts like a template for an enumerable algorithm. The block takes a parameter, &lt;code&gt;y&lt;/code&gt;, which is an instance of an &lt;code&gt;Enumerator::Yielder&lt;/code&gt;, which let&amp;rsquo;s us yield each member of the &lt;code&gt;Enumerator&lt;/code&gt; to blocks passed to &lt;code&gt;Enumerable&lt;/code&gt; method calls. In short, this means we can treat an &lt;code&gt;Enumerator&lt;/code&gt; like an &lt;code&gt;Array&lt;/code&gt;, though we can also do so much more.&lt;/p&gt;

&lt;p&gt;To retrieve the first ten members of our enumerable fibonacci method, we’d instead do something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;fibonacci.take(10)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can still enumerate over the fibonacci sequence as before:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;fibonacci.take(10).each { |i| puts i }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the &lt;code&gt;Enumerator#lazy&lt;/code&gt; method, we can avoid eager enumeration and run queries or calculations as each member is generated. This opens the door to some interesting use cases, like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;fibonacci.lazy.select(&amp;amp;:even?).first(10)`
=&amp;gt; [2, 8, 34, 144, 610, 2584, 10946, 46368, 196418, 832040]

fibonacci.lazy.select(&amp;amp;:odd?).first(10)`
=&amp;gt; [1, 1, 3, 5, 13, 21, 55, 89, 233, 377]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can filter for the first 10 even or odd numbers generated by fibonacci. Inserting the &lt;code&gt;with_index&lt;/code&gt; enumerator method, we can see how many items we need to enumerate to get either the first 10 even or odd numbers:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;fibonacci.lazy.with_index.select { |n, i| n.odd? }.first(10)
=&amp;gt; [[1, 0], [1, 1], [3, 3], [5, 4], [13, 6], [21, 7], [55, 9], [89, 10], [233, 12], [377, 13]]

fibonacci.lazy.with_index.select { |n, i| n.even? }.first(10)
=&amp;gt; [[2, 2], [8, 5], [34, 8], [144, 11], [610, 14], [2584, 17], [10946, 20], [46368, 23], [196418, 26], [832040, 29]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice we only need to enumerate 13 items to retrieve 10 odd numbers from fibonacci, while 29 are needed to retrieve the first 10 evens. These results wouldn’t be easily achieved with our previous fibonacci implementation in which the number of desired members must be known ahead of time.&lt;/p&gt;

&lt;p&gt;Try creating other numerical sequences with enumerators on your own, like multiples of &lt;code&gt;n&lt;/code&gt;, factorials for the first &lt;code&gt;n&lt;/code&gt; integers or enumerating sums of squares. Also be sure to check out Pat Shaughnessy&amp;rsquo;s &lt;a href="http://patshaughnessy.net/2013/4/3/ruby-2-0-works-hard-so-you-can-be-lazy"&gt;great primer on lazy enumerators&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Sequence Functions&lt;/h3&gt;

&lt;p&gt;Clojure also has a number of useful functions that allow us to generate sequences from other functions. Let’s look at &lt;code&gt;repeatedly&lt;/code&gt; which simply calls the given function over and over, emitting the results as a sequence. To get a sequence of five random numbers between 0 - 100:&lt;/p&gt;

&lt;pre&gt;&lt;code class="clojure"&gt;(take 5 (repeatedly #(rand-int 100)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The syntax may look odd, but read in plain English, this expression “takes the first 5 results of repeatedly asking for a random integer of 0 to 100”, returning sequence.&lt;/p&gt;

&lt;p&gt;We can use Ruby enumerators to do something similar in Ruby. Let’s create our own version of &lt;code&gt;repeatedly&lt;/code&gt;, which takes a will call a given block over and over again. Let’s start with a naive implementation which use a loop:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;def repeatedly_foo(&amp;amp;block)
 loop do
    block.call
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method is not useful because the function will never return; it&amp;rsquo;s an infinite loop! You’ll have to issue a kill signal to stop the execution (Ctrl-C!). We could give &lt;code&gt;repeatedly_foo&lt;/code&gt; a limit &lt;code&gt;n&lt;/code&gt; and break out of the loop with a counter.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;def repeatedly_foo(n, &amp;amp;block)
  result = []

  loop do
    break if result.size &amp;gt;= n

    result &amp;lt;&amp;lt; block.call
  end

  result
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an improvement, but like our fibonacci example earlier, it means we need to load the desired number eagerly in the &lt;code&gt;result&lt;/code&gt; array and have less control over the results.&lt;/p&gt;

&lt;p&gt;Again, we&amp;rsquo;ll wrap the loop in an &lt;code&gt;Enumerator&lt;/code&gt; so we can treat the result as a sequence. We’ll “yield” the result of calling the block to the &lt;code&gt;Enumerator::Yielder&lt;/code&gt; object (the &lt;code&gt;y &amp;lt;&amp;lt; block.call&lt;/code&gt;) expression in our loop:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;def repeatedly(&amp;amp;block)
  Enumerator.new do |y|
    loop do
      y &amp;lt;&amp;lt; block.call # &amp;quot;yield&amp;quot; the result to the Enumerator::Yielder
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have an abstraction that can be chained to other enumerator methods. It also has a similar terse feel to the Clojure inspiration we saw earlier.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;repeatedly { rand(100) }.take(5)
=&amp;gt; [48, 48, 72, 41, 70] # your results will vary... they&amp;#39;re random!
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;To Infinity and Beyond&lt;/h3&gt;

&lt;p&gt;Of course, sequences of numbers aren’t the only concept that can be modeled this way in Ruby. Any collection of unknown size, for example, results from a search query, paginated resources from an API client library, data from a web crawl, etc., are also great use cases for exposure as enumerables. Consider wrapping your generated collections in an Enumerator to provide callers with flexible, composable results.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>What the Heck is a Ruby Enumerator?</title>
    <link rel="alternate" href="/blog/what-is-enumerator.html"/>
    <id>/blog/what-is-enumerator.html</id>
    <published>2015-11-17T19:00:00-05:00</published>
    <updated>2015-11-17T19:00:00-05:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;Let’s pretend we know about Ruby’s &lt;a href="http://ruby-doc.org/core-2.2.3/Enumerable.html"&gt;Enumerable&lt;/a&gt; module - that it’s included in
Ruby’s core collection classes like Array and Hash and provides a bunch of
methods for traversal, searching and sorting, and that we can can introduce it
to plain old ruby...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Let&amp;rsquo;s pretend we know about Ruby&amp;rsquo;s &lt;a href="http://ruby-doc.org/core-2.2.3/Enumerable.html"&gt;Enumerable&lt;/a&gt; module - that it&amp;rsquo;s included in
Ruby&amp;rsquo;s core collection classes like Array and Hash and provides a bunch of
methods for traversal, searching and sorting, and that we can can introduce it
to plain old ruby classes through inclusion and implementing the &lt;code&gt;#each&lt;/code&gt; method.
Check out this &lt;a href="http://ruby.bastardsbook.com/chapters/enumerables/"&gt;dated - yet reliable - Enumerable primer&lt;/a&gt; if you&amp;rsquo;d like a refresher.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://ruby-doc.org/core-2.2.0/Enumerator.html"&gt;Enumerator&lt;/a&gt; is like &lt;code&gt;Enumerable&amp;#39;s&lt;/code&gt; kid sister; while &lt;code&gt;Enumerable&lt;/code&gt; is getting all the attention, &lt;code&gt;Enumerator&lt;/code&gt;, having borrowed many traits of her sibling, can do lots of amazing things in her own way and really should get more credit. Well, it&amp;rsquo;s time you took notice, Ma.&lt;/p&gt;

&lt;p&gt;So what exactly is &lt;code&gt;Enumerator&lt;/code&gt;?. For one, it&amp;rsquo;s a class. You can instantiate an
instance of &lt;code&gt;Enumerator&lt;/code&gt; by calling certain &lt;code&gt;Enumerable&lt;/code&gt; instance methods, like &lt;code&gt;Array#each&lt;/code&gt;, without a block:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;[1, 2, 3].each
=&amp;gt; #&amp;lt;Enumerator: [1, 2, 3]:each&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact, you can do this for many (but not all) of Array&amp;rsquo;s &lt;code&gt;Enumerable&lt;/code&gt; methods
that expect a block:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;[1, 2, 3].map
=&amp;gt; #&amp;lt;Enumerator: [1, 2, 3]:map&amp;gt;

[1, 2, 3].select
=&amp;gt; #&amp;lt;Enumerator: [1, 2, 3]:select&amp;gt;

[1, 2, 3].reduce
LocalJumpError: no block given
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay, big deal. What does this get us? Glad you asked.&lt;/p&gt;

&lt;p&gt;Instances of Enumerator are enumerable:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;e = [1, 2, 3].map
e.each { |n| p n }
1
2
3
=&amp;gt; [nil, nil, nil]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See what happened there? The expression printed out each digit, but returned &lt;code&gt;[nil, nil, nil]&lt;/code&gt; instead of of &lt;code&gt;[1, 2, 3]&lt;/code&gt;. The &lt;code&gt;Enumerator&lt;/code&gt; implemented &lt;code&gt;map&lt;/code&gt; in the context of &lt;code&gt;each&lt;/code&gt;; since &lt;code&gt;p n&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;, we got three entries of &lt;code&gt;nil&lt;/code&gt; in the return value. We chained the behavior of two enumerable methods.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s another example. It&amp;rsquo;s often useful to enumerate collection members along
with the index. We can use &lt;code&gt;Enumerable#each_with_index&lt;/code&gt;, we don&amp;rsquo;t have
&lt;code&gt;Enumerable#map_with_index&lt;/code&gt;. Javascript &lt;code&gt;forEach&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; gets this right, but not Ruby&amp;hellip; or does it?&lt;/p&gt;

&lt;p&gt;Almost - we can chain enumerators together to get effectively the same result:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;e = [1, 2, 3].map
e.each_with_index { |n, i| n * i }
=&amp;gt; [0, 2, 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The block receives each member of the original array along with its index
for each iteration. This usage is common enough, that &lt;code&gt;Enumerator&lt;/code&gt; provides
&lt;code&gt;with_index&lt;/code&gt; to give:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;e = [1, 2, 3].map.with_index { |n, i| n * i }
=&amp;gt; [0, 2, 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reads pretty well, eh? What&amp;rsquo;s really interesting here is that enumerators package
up knowledge of a collection and a method with which we want to enumerate.&lt;/p&gt;

&lt;p&gt;We can combine several enumerators in different orders to get different
behaviors. Here&amp;rsquo;s an nice example borrowed from &lt;a href="http://dgiim.github.io/blog/2015/08/24/ruby-enumerators/#the-enumerator-class"&gt;another recent post on the subject&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;letters = %w[a b c d e]

group_1 = letters.reverse_each.group_by.each_with_index do |item, index|
  index % 3
end

group_2 = letters.reverse_each.each_with_index.group_by do |item, index|
  index % 3
end

p group_1
=&amp;gt; {0=&amp;gt;[&amp;quot;e&amp;quot;, &amp;quot;b&amp;quot;], 1=&amp;gt;[&amp;quot;d&amp;quot;, &amp;quot;a&amp;quot;], 2=&amp;gt;[&amp;quot;c&amp;quot;]}

p group_2
=&amp;gt; {0=&amp;gt;[[&amp;quot;e&amp;quot;, 0], [&amp;quot;b&amp;quot;, 3]], 1=&amp;gt;[[&amp;quot;d&amp;quot;, 1], [&amp;quot;a&amp;quot;, 4]], 2=&amp;gt;[[&amp;quot;c&amp;quot;, 2]]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Enumerator&lt;/code&gt; provides some additional methods that allow for &amp;ldquo;external&amp;rdquo;
enumeration as well. With an enumerator instance, we can call &lt;code&gt;next&lt;/code&gt; to get each
successive member of the collection.&lt;/p&gt;

&lt;p&gt;Consider &lt;code&gt;Enumerable#cycle&lt;/code&gt;. Calling &amp;ldquo;cycle&amp;rdquo; on an enumerable collection (without a limit arg) will enumerate over members of a collection ad nauseum. When implemented as an enumerator of css colors, we can use &lt;code&gt;cycle&lt;/code&gt; to create striped table rows:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;Project = Struct.new(:name)

colors = [&amp;#39;aliceblue&amp;#39;, &amp;#39;ghostwhite&amp;#39;].cycle
projects = [Project.new(&amp;quot;TODO&amp;quot;),
            Project.new(&amp;quot;Work&amp;quot;),
            Project.new(&amp;quot;Home&amp;quot;)]

require &amp;#39;erb&amp;#39;

erb = (&amp;lt;&amp;lt;-ERB)
&amp;lt;table&amp;gt;
&amp;lt;% projects.each_with_index do |project, index| %&amp;gt;
 &amp;lt;tr style=&amp;quot;background: &amp;lt;%= colors.next %&amp;gt;&amp;quot;&amp;gt;
   &amp;lt;td&amp;gt;&amp;lt;%= index + 1 %&amp;gt;&amp;lt;/td&amp;gt;
   &amp;lt;td&amp;gt;&amp;lt;%= project.name %&amp;gt;&amp;lt;/td&amp;gt;
 &amp;lt;/tr&amp;gt;
&amp;lt;% end %&amp;gt;
&amp;lt;/table&amp;gt;
ERB

p ERB.new(erb).result(binding).gsub(/^$\n/, &amp;quot;&amp;quot;)

=&amp;gt; &amp;#39;&amp;lt;table&amp;gt;
 &amp;lt;tr style=&amp;quot;background: aliceblue&amp;quot;&amp;gt;
   &amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;
   &amp;lt;td&amp;gt;TODO&amp;lt;/td&amp;gt;
 &amp;lt;/tr&amp;gt;
 &amp;lt;tr style=&amp;quot;background: ghostwhite&amp;quot;&amp;gt;
   &amp;lt;td&amp;gt;2&amp;lt;/td&amp;gt;
   &amp;lt;td&amp;gt;Work&amp;lt;/td&amp;gt;
 &amp;lt;/tr&amp;gt;
 &amp;lt;tr style=&amp;quot;background: aliceblue&amp;quot;&amp;gt;
   &amp;lt;td&amp;gt;3&amp;lt;/td&amp;gt;
   &amp;lt;td&amp;gt;Home&amp;lt;/td&amp;gt;
 &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Brilliant! Notice how, in each enumeration of &lt;code&gt;project&lt;/code&gt;, we&amp;rsquo;re calling &lt;code&gt;colors.next&lt;/code&gt;. So external enumeration is one technique for enumerating more than one collection at a time.&lt;/p&gt;

&lt;p&gt;Not all enumerators will enumerate forever. Using cycle with a limit will result
in a &lt;code&gt;StopIteration&lt;/code&gt; error:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;numbers = [1,2].cycle(1)
=&amp;gt; #&amp;lt;Enumerator: [1, 2]:cycle(1)&amp;gt;

numbers.next
# =&amp;gt; 1

numbers.next
=&amp;gt; 2

numbers.next
StopIteration: iteration reached an end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;loop&lt;/code&gt; construct knows how to rescues from this error and treats it as a
&lt;code&gt;break&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;numbers = [1,2].cycle(1)
=&amp;gt; #&amp;lt;Enumerator: [1, 2]:cycle(1)&amp;gt;

loop do
  p numbers.next
end

puts &amp;quot;Tada!&amp;quot;

1
2
=&amp;gt; nil

Tada!
=&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can rewind enumerators or peek at their next values:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;e = [1, 2, 3].each

e.next
=&amp;gt; 1

e.peek
=&amp;gt; 2

e.next
=&amp;gt; 2

e.rewind
=&amp;gt; #&amp;lt;Enumerator: [1, 2, 3]:each&amp;gt;

e.next
=&amp;gt; 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So enumerators give us flexible and composable uses for enumerables. Combine them to extend behavior of existing enumerable methods. Use them for external enumeration with methods like &lt;code&gt;#next&lt;/code&gt; and &lt;code&gt;#peek&lt;/code&gt; for iterating over multiple arrays. In a future post, we&amp;rsquo;ll take a look at how to create our own enumerators outside the context of arrays and hashes and some good reasons for doing so.&lt;/p&gt;

&lt;p&gt;In case you missed it, &lt;a href="blog/ruby-enumerable.html"&gt;check out my presentation in the previous post&lt;/a&gt; on the &lt;code&gt;Enumerable&lt;/code&gt; module for more examples on how to get the most out of this terrific Ruby module.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Enumerable - Why I Fell in Love with Ruby</title>
    <link rel="alternate" href="/blog/ruby-enumerable.html"/>
    <id>/blog/ruby-enumerable.html</id>
    <published>2015-11-16T19:00:00-05:00</published>
    <updated>2015-11-16T19:00:00-05:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;I like to say I started programming by accident. While facilitating a Lego robotics club during my teaching years, I was surprised to realize how much I enjoyed coding. Later, when I first learned Ruby as a full-time developer, I rediscovered that...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I like to say I started programming by accident. While facilitating a Lego robotics club during my teaching years, I was surprised to realize how much I enjoyed coding. Later, when I first learned Ruby as a full-time developer, I rediscovered that joy.&lt;/p&gt;

&lt;p&gt;A big reason for my love of Ruby is the &lt;a href="http://ruby-doc.org/core-2.2.3/Enumerable.html"&gt;Enumerable&lt;/a&gt; module because of its simple, functional style and ability to be combined and chained to form useful constructs - a lot like Legos.&lt;/p&gt;

&lt;p&gt;I recently gave a talk at both &lt;a title="NYC.rb" href="http://www.meetup.com/NYC-rb/events/223864932/"&gt;NYC.rb&lt;/a&gt; and &lt;a title="DC Ruby User's Group" href="http://www.meetup.com/dcruby/events/225338026/"&gt;DCRUG&lt;/a&gt; about some great features of &lt;code&gt;Enumerable&lt;/code&gt; that deserve more attention. I touch on interesting use cases for using &lt;code&gt;Enumerable&lt;/code&gt; and &lt;code&gt;Enumerator&lt;/code&gt; including API client libraries, streaming HTTP, web crawlers, CSV parsing, and infinite sequences.&lt;/p&gt;

&lt;script async class="speakerdeck-embed" data-id="df623bc08aa642328c303a619c92fab0" data-ratio="1.55386949924127" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;p&gt;I put together a bunch of code samples for the talk and assembled them in a repository on GitHub:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rossta/loves-enumerable"&gt;https://github.com/rossta/loves-enumerable&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To run a sample, clone the repo and install the gems:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ git clone https://github.com/rossta/loves-enumerable.git
$ cd loves-enumerable
$ bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then simply run the code with the ruby executable.&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ ruby code/pascals_triangle.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll get the most out of this repo by inspecting the source along with following the presentation.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Three Steps to Effective Code Reviews</title>
    <link rel="alternate" href="/blog/three-steps-to-effective-code-reviews.html"/>
    <id>/blog/three-steps-to-effective-code-reviews.html</id>
    <published>2014-02-24T19:00:00-05:00</published>
    <updated>2014-02-24T19:00:00-05:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;These days, software developers are living in a &lt;a href="http://scottchacon.com/2011/08/31/github-flow.html"&gt;GitHub Workflow&lt;/a&gt; world. They develop new code on version-controlled &lt;a href="http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging"&gt;branches&lt;/a&gt; and gather feedback prior to inclusion in the primary release, or “master” branch, through &lt;a href="https://help.github.com/articles/using-pull-requests"&gt;pull requests&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our development team...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;These days, software developers are living in a &lt;a href="http://scottchacon.com/2011/08/31/github-flow.html"&gt;GitHub Workflow&lt;/a&gt;&lt;/a&gt; world. They develop new code on version-controlled &lt;a href="http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging"&gt;branches&lt;/a&gt; and gather feedback prior to inclusion in the primary release, or “master” branch, through &lt;a href="https://help.github.com/articles/using-pull-requests"&gt;pull requests&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our development team at ChallengePost has been using this workflow for almost two years with great success, although we&amp;#8217;ve had our share of pain points. For better or worse, feedback typically happens asynchronously and is in written form. Convenient, yes, although this approach is not free of the wrinkles, especially when we use poor word choice, hyperbole, sarcasm, and other forms of counterproductive commentary.&lt;/p&gt;

&lt;p&gt;This has led to resentment and injured relationships on occasion. In response, I’m working to improve how we give and receive criticism.&lt;/p&gt;

&lt;h3&gt;Building trust&lt;/h3&gt;

&lt;p&gt;Let&amp;#8217;s assume that, when done well, code reviews are a good thing. That is to say, the practice of giving and receiving feedback in a consistent, continual manner has true benefits. These may include improving code quality over time and driving convergence of ideas and practices within your team. In my experience, for feedback to be effective, trust amongst team members is a key requirement.&lt;/p&gt;

&lt;p&gt;This may not be an issue for teams that have been together for a long time or share common values, but for others, trust has to be earned. In the absence of trust, there&amp;#8217;s more opportunity for personal differences to get intertwined with feedback. While there are no quick fixes, what follows are code review practices that we have adopted to foster our shared sense of trust.&lt;/p&gt;

&lt;h3&gt;1. Adopt a style guide&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Spoiler alert&lt;/strong&gt;: code syntax and formatting are trivial choices. What&amp;#8217;s most important is your team agrees on and adheres to a set of guidelines.&lt;/p&gt;

&lt;p&gt;Take a few hours as a team to hammer out a style guide for each of the languages you use. Better yet, use a public example like &lt;a href="https://github.com/styleguide"&gt;GitHub&amp;#8217;s style guide&lt;/a&gt; as a starting point. Besides the obvious benefits of consistency and maintainability, style guides reduce the likelihood of flared tempers during reviews; when you’re pushing to get a new feature out the door, it&amp;#8217;s unhealthy to argue over whitespace. This works when your team respectfully follows and comments on style issues respectfully, saving concerns about existing guidelines for separate discussions.&lt;/p&gt;

&lt;h3&gt;2. Start with the end in mind&lt;/h3&gt;

&lt;p&gt;Imagine a developer who emerges, after hours or days off in the “zone,” with a sparkly new feature and asks for a review. All is good, right? Except that the rest of the team has issues with the implementation. Words are exchanged, the developer takes the feedback personally, and suddenly the entire team is distracted from shipping code.&lt;/p&gt;

&lt;p&gt;Personally, I believe code review should begin well before the final commit. It can happen early on; in short discussions with teammates once the ideas start to take shape. Get buy-in on your approach before you’re ready to merge your branch. Opening a pull request and asking for feedback while work is still in progress is a great way to build trust between teammates, and reduce the likelihood that criticism may be interpreted as a personal attack.&lt;/p&gt;

&lt;h3&gt;3. Use the Rubber Duck&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Rubber_duck_debugging"&gt;Rubber duck&lt;/a&gt; debugging is a method of finding solutions simply by explaining code line-by-line to an inanimate object. We&amp;#8217;ve found it helps to do the same with our writing, especially when our first instinct is to respond to code or another comment with sarcasm or anger. Take a moment to read your response aloud and question the wording, timing, and appropriateness. This includes taking into account the personality of the team members you’re addressing. &lt;a href="http://thoughtbot.com"&gt;Thoughtbot&lt;/a&gt; has compiled a useful set of &lt;a href="https://github.com/thoughtbot/guides/tree/master/code-review"&gt;code review guidelines&lt;/a&gt; to help both readers and writers respond thoughtfully. I also suggest that teammates share meta-feedback to ensure that everyone is hitting the right notes of tone and instruction.&lt;/p&gt;

&lt;p&gt;The next time you feel pain in a code review, take a step back to consider what’s missing. It could be that your team needs to adopt some guidelines to reduce friction and ensure feedback is exchanged in as a constructive and positive manner as possible. After all, you have both code and relationships to maintain.&lt;/p&gt;

&lt;h3&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bbatsov/ruby-style-guide"&gt;Community ruby style guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/styleguide"&gt;GitHub style guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mdswanson.com/blog/2012/11/04/code-reviews-good-idea-bad-idea.html"&gt;Code reviews: Good idea / bad idea?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://code.dblock.org/why-i-love-code-reviews"&gt;Why I Love Code Reviews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://whilefalse.blogspot.com/2012/06/code-reviews-code-stories.html"&gt;Code Review, Code Stories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/1124-how-we-use-pull-requests-to-build-github"&gt;How we use pull requests to build GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ruby, You Autocomplete Me</title>
    <link rel="alternate" href="/blog/ruby-you-autocomplete-me.html"/>
    <id>/blog/ruby-you-autocomplete-me.html</id>
    <published>2014-02-04T19:00:00-05:00</published>
    <updated>2014-02-04T19:00:00-05:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;My team recently added a tagging feature to our web app. As the user types in
the text input, the app supplies autocomplete suggestions from our database via
javascript; a familiar UX. While backporting tags to existing records on the
&lt;code&gt;rails console&lt;/code&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;My team recently added a tagging feature to our web app. As the user types in
the text input, the app supplies autocomplete suggestions from our database via
javascript; a familiar UX. While backporting tags to existing records on the
&lt;code&gt;rails console&lt;/code&gt;, it hit me: &amp;ldquo;Why not bring tag autocompletion to the command
line?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The default &lt;code&gt;rails console&lt;/code&gt; provides completion out-of-the-box though all the script
does is start &lt;code&gt;irb&lt;/code&gt; with the rails environment and &lt;code&gt;irb/completion&lt;/code&gt; required.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# !/usr/bin/env ruby
require File.expand\_path(&amp;#39;../../load\_paths&amp;#39;, __FILE__)
require &amp;#39;rails/all&amp;#39;
require &amp;#39;active\_support/all&amp;#39;
require &amp;#39;irb&amp;#39;
require &amp;#39;irb/completion&amp;#39;
IRB.start

# from https://github.com/rails/rails/blob/master/tools/console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Turns out that all &lt;code&gt;irb/completion&lt;/code&gt; does is configure the ruby interface to the
&lt;a href="http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html"&gt;GNU Readline Library&lt;/a&gt;.
This is done with the ruby &lt;a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/readline/rdoc/Readline.html"&gt;Readline&lt;/a&gt;
module. &lt;code&gt;Readline&lt;/code&gt; accepts a &lt;code&gt;proc&lt;/code&gt; that determines completion behavior by returning an array of string
candidates given an input string triggered, typically, by pressing &lt;code&gt;TAB&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;From &lt;code&gt;irb/completion&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;if Readline.respond\_to?(&amp;quot;basic\_word\_break\_characters=&amp;quot;)
# Readline.basic\_word\_break\_characters= &amp;quot; \t\n\&amp;quot;\\&amp;#39;\`\&amp;gt;\&amp;lt;=;|&amp;amp;{(&amp;quot;
  Readline.basic\_word\_break\_characters= &amp;quot; \t\n\`\&amp;gt;\&amp;lt;=;|&amp;amp;{(&amp;quot;
end
Readline.completion\_append\_character = nil
Readline.completion\_proc = IRB::InputCompletor::CompletionProc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;IRB::InputCompletor::CompletionProc&lt;/code&gt; is a proc that evaluates a large case
statement of regular expressions that attempt to determine the type of given
object and provide a set of candidates to match, such as &lt;code&gt;String&lt;/code&gt; instance methods when
the input matches &lt;code&gt;$r{^(([&amp;quot;&amp;#39;]).*\2)\.([^.]*)$}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To give &lt;code&gt;Readline&lt;/code&gt; a spin, fire up &lt;code&gt;irb&lt;/code&gt; and paste in the following example, borrowed
from the &lt;a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/readline/rdoc/Readline.html"&gt;ruby docs&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;require &amp;#39;readline&amp;#39;

LIST = [
  &amp;#39;search&amp;#39;, &amp;#39;download&amp;#39;, &amp;#39;open&amp;#39;,
  &amp;#39;help&amp;#39;, &amp;#39;history&amp;#39;, &amp;#39;quit&amp;#39;,
  &amp;#39;url&amp;#39;, &amp;#39;next&amp;#39;, &amp;#39;clear&amp;#39;,
  &amp;#39;prev&amp;#39;, &amp;#39;past&amp;#39;
].sort

comp = proc { |s| LIST.grep(/^#{Regexp.escape(s)}/) }

Readline.completion\_append\_character = &amp;quot; &amp;quot;
Readline.completion\_proc = comp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s nothing stopping us from taking this to the &lt;code&gt;rails console&lt;/code&gt; to take
advantage of our rails environment and even access the database. Building off
the example, we can replace the hard-coded array with a list of tags plucked
from a simple activerecord query:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;require &amp;#39;readline&amp;#39;

comp = proc { |s| ActsAsTaggableOn::Tag.named\_like(s).pluck(:name) }

Readline.completion\_proc = comp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have room for improvement. For one thing, this makes a new query every time
you attempt to autocomplete. For a reasonable number of tags, we could load the
tag list in memory and grep for the matches instead. There is still another problem;
by replacing the &lt;code&gt;Readline.completion_proc&lt;/code&gt;, we&amp;rsquo;ve clobbered the functionality
provided by &lt;code&gt;irb/completion&lt;/code&gt;. One approach would be to fall back to the
&lt;code&gt;IRB::InputCompletor::CompletionProc&lt;/code&gt; or add its result to the array of candidates.
Given IRB has documented, &lt;a href="https://github.com/cldwalker/bond#irbs-incorrect-completions"&gt;incorrect completions&lt;/a&gt;
(try completing methods on a proc) and no built-in support for extending completion behavior,
this could get messy.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href="https://github.com/cldwalker/bond"&gt;bond&lt;/a&gt;, a drop-in replacement for IRB
completion. It aims to improve on IRB&amp;rsquo;s shortcomings and provides methods for
adding custom completions. To take advantage of Bond in the console:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;require &amp;#39;bond&amp;#39;
Bond.start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bond allows you to extend the strategies for autocompleting text with &lt;a href="https://github.com/cldwalker/bond/blob/master/lib/bond.rb#L21"&gt;the
&lt;code&gt;Bond.completion&lt;/code&gt; method&lt;/a&gt;.
To set up a Bond completion, we need a condition and an action; when the condition is matched,
then the given action will determine which candidates are returned. Calling
&lt;code&gt;Bond.start&lt;/code&gt; will register Bond&amp;rsquo;s default completions. For example, the
following completion is triggered with the text for completion starts with a
letter preceded by &amp;ldquo;::&amp;rdquo;; the search space is scoped to &lt;code&gt;Object.constants&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# https://github.com/cldwalker/bond/blob/master/lib/bond/completion.rb#L13
complete(:prefix=\&amp;gt;&amp;#39;::&amp;#39;, :anywhere=\&amp;gt;&amp;#39;[A-Z][^:\.\(]\*&amp;#39;) {|e| Object.constants }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add tag autocompletion whenever we start a new string, we could use the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;include Bond::Search # provides methods to search lists

TAG\_NAMES = ActsAsTaggableOn::Tag.pluck(:name) # load tag names in memory

Bond.complete(:name=\&amp;gt;:tags, prefix: &amp;#39;&amp;quot;&amp;#39;, :anywhere=\&amp;gt;&amp;#39;([A-Z][^,]\*)&amp;#39;) {|e|
  tag = e.matched[2]
  normal\_search(tag, TAG\_NAMES)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Boom! Now we when autocomplete with some text inside an open double-quote, matching
tags from the database appear on the console.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;irb(main)\&amp;gt; &amp;quot;Face[TAB]
Face++                     Facebook Graph             FaceCash
Face.com                   Facebook Graph API         FaceDetection
Facebook                   Facebook Opengraph         Facelets
Facebook Ads               Facebook Real-time Updates Faces.com
Facebook Chat              Facebook SDK               Facetly
Facebook Credits           Facebook Social Plugins
irb(main)\&amp;gt; &amp;quot;Facebook&amp;quot;, &amp;quot;Twit[TAB]
Twitcher          TwitLonger        Twitter           Twitter Streaming Twitxr
TwitchTV          TwitPic           Twitter API       TwitterBrite
TwitDoc           TwitrPix          Twitter Bootstrap TwitterCounter
Twitgoo           Twitscoop         Twitter Grader    Twittervision
Twitlbl           TwitSprout        Twitter Oauth     Twitvid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even though we ended up leveraging an existing gem, digging into the
Ruby standard library source code proved to be a useful exercise, revealing some
simple ways to hook into features easily taken for granted.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Automatic Backups to Amazon S3 are Easy</title>
    <link rel="alternate" href="/blog/automatic-backups-to-amazon-s3-are-easy.html"/>
    <id>/blog/automatic-backups-to-amazon-s3-are-easy.html</id>
    <published>2014-01-31T19:00:00-05:00</published>
    <updated>2014-01-31T19:00:00-05:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;You have good reason to backup your files. Amazon S3 is a cost-effective storage option. It doesn’t take the place of a dedicated drive that you own, it can be useful for redundancy nonetheless. With a few easy command-line steps (plus some pre-requisites...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;You have good reason to backup your files. Amazon S3 is a cost-effective storage option. It doesn&amp;rsquo;t take the place of a dedicated drive that you own, it can be useful for redundancy nonetheless. With a few easy command-line steps (plus some pre-requisites), you can set up your machine to automate backups to S3 in no time.&lt;/p&gt;

&lt;h3&gt;Pre-requisites&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;An &lt;a href="http://aws.amazon.com/"&gt;Amazon web services account&lt;/a&gt; and &lt;a href="http://aws.amazon.com/iam/"&gt;your Amazon access credentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s3cmd&lt;/code&gt;: command line interface to S3.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cron&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;cron&lt;/code&gt; is pretty standard on unix-based systems. As of this writing, &lt;code&gt;s3cmd&lt;/code&gt; should be straightforward:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Mac users
$ brew install s3cmd

# Linux
$ yum install s3cmd
# or
$ apt-get install s3cmd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Optional:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gpg&lt;/code&gt;: opensource encryption program&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Setup&lt;/h3&gt;

&lt;p&gt;First you&amp;rsquo;ll need to configure s3cmd: &lt;code&gt;s3cmd --configure&lt;/code&gt;. Have your Amazon access key and secret key at the ready.&lt;/p&gt;

&lt;p&gt;If you plan to store sensitive data on S3, enter the path to your &lt;code&gt;gpg&lt;/code&gt; executable; &lt;code&gt;s3cmd&lt;/code&gt; will encrypt your data before transferring from your machine to S3. It also decrypts when downloading to your machine. Keep in mind, encrypted files won&amp;rsquo;t be readable by others with direct access.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a sample result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ s3cmd --configure

Enter new values or accept defaults in brackets with Enter.
Refer to user manual for detailed description of all options.

Access key and Secret key are your identifiers for Amazon S3
Access Key: xxxxxxxxxxxxxxxxxxxx
Secret Key: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

Encryption password is used to protect your files from reading
by unauthorized persons while in transfer to S3
Encryption password: xxxxxxxxxx
Path to GPG program: /usr/local/bin/gpg

When using secure HTTPS protocol all communication with Amazon S3
servers is protected from 3rd party eavesdropping. This method is
slower than plain HTTP and can&amp;#39;t be used if you&amp;#39;re behind a proxy
Use HTTPS protocol [No]: Yes

New settings:
  Access Key: xxxxxxxxxxxxxxxxxxxx
  Secret Key: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  Encryption password: xxxxxxxxxx
  Path to GPG program: /usr/local/bin/gpg
  Use HTTPS protocol: True
  HTTP Proxy server name:
  HTTP Proxy server port: 0

Test access with supplied credentials? [Y/n] Y
Please wait...
Success. Your access key and secret key worked fine :-)

Now verifying that encryption works...
Success. Encryption and decryption worked fine :-)

Save settings? [y/N] y
Configuration saved to &amp;#39;$HOME/.s3cfg&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Backup&lt;/h3&gt;

&lt;p&gt;Now all you need is a file to backup and an S3 bucket to store it.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say you&amp;rsquo;re a web developer like me and you want to back up your MySQL or Postgres development data. First, generate the backup file (you may need to add database credentials command-line options, of course):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mysql
$ mysqldump my_app_development &amp;gt; backup-`date +%Y-%m-%d`.sql

# or postgres
$ pg_dump my_app_development &amp;gt; backup-`date +%Y-%m-%d`.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use &lt;code&gt;s3cmd&lt;/code&gt; to create a bucket. This is essentially a top-level directory in your S3 account. Since bucket names must be unique to &lt;em&gt;all&lt;/em&gt; S3 users, you won&amp;rsquo;t be able to call it something like &amp;ldquo;backups&amp;rdquo;. It&amp;rsquo;s helpful to use a prefix like your email or handle.&lt;/p&gt;

&lt;p&gt;Creates an S3 bucket called &amp;lsquo;myname-backups&amp;rsquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ s3cmd mb s3://myname-backups
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you&amp;rsquo;re ready to deliver. Encrypt and send your sql dump file to your new S3 bucket:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ s3cmd put backup-2014-02-01.sql s3://myname-backups/backup-2014-02-01.sql --encrypt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can verify it&amp;rsquo;s in the bucket:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ s3cmd ls s3://myname-backups/
2014-02-01 22:32   1109702   s3://myname-backups/test/backup-2014-02-01.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And retrieve it (with automatic decryption when performed on your machine):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s3cmd get s3://myname-backups/backup-2014-02-01.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;s3cmd&lt;/code&gt; supports a wide range of configuration options beyond those entered during the setup phase.Once set, your global configuration is editable in your &lt;code&gt;.s3cfg&lt;/code&gt; file, typically saved in your home directory. You can also set options at the command line.&lt;/p&gt;

&lt;h3&gt;Automate&lt;/h3&gt;

&lt;p&gt;Backing up is good but automatic, recurring backups are even better; like saving money, it&amp;rsquo;s more likely to happen when you make a computer do it for you.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s add a cron task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash

TIMESTAMP=$(date +%Y-%m-%d)
TEMP_FILE=$(mktemp tmp.XXXXXXXXXX)
S3_FILE=&amp;quot;s3://myname-backups/local/data/backup-$TIMESTAMP&amp;quot;
pg_dump directory_development &amp;gt; $TEMP_FILE
s3cmd put $TEMP_FILE $S3_FILE --encrypt
rm &amp;quot;$TEMP_FILE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save this in a directory for your local scripts, like &lt;code&gt;$HOME/bin/database_backup.sh&lt;/code&gt; and add execute permissions with &lt;code&gt;chmod +x ~/bin/database_backup.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To edit your crontab, &lt;code&gt;crontab -e&lt;/code&gt;, and set it to run everyday at 10PM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Backup database to S3 daily
0 22 * * * /Users/myname/bin/database_backup.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Easy, right?&lt;/p&gt;
</content>
  </entry>
</feed>
