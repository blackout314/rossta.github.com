<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rosskaff.com</title>
  <subtitle>Ross Kaffenberger</subtitle>
  <id>http://rosskaff.com/</id>
  <link href="http://rosskaff.com/"/>
  <link href="http://rosskaff.com/feed.xml" rel="self"/>
  <updated>2014-02-25T00:00:00Z</updated>
  <author>
    <name>Ross Kaffenberger</name>
  </author>
  <entry>
    <title>Three Steps to Effective Code Reviews</title>
    <link rel="alternate" href="/blog/2014/02/three-steps-to-effective-code-reviews.html"/>
    <id>/blog/2014/02/three-steps-to-effective-code-reviews.html</id>
    <published>2014-02-25T00:00:00Z</published>
    <updated>2014-02-25T00:00:00Z</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;How can a Rubber Duck help with Github pull requests? I cover that topic and more in &lt;a href="http://blog.challengepost.com/post/77811098097/three-steps-to-effective-code-reviews"&gt;the article I wrote&lt;/a&gt; for the &lt;a href="http://challengepost.com"&gt;ChallengePost&lt;/a&gt; blog this month: &lt;a href="http://blog.challengepost.com/post/77811098097/three-steps-to-effective-code-reviews"&gt;Three Steps to Effective Code Reviews&lt;/a&gt;.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;How can a Rubber Duck help with Github pull requests? I cover that topic and more in &lt;a href="http://blog.challengepost.com/post/77811098097/three-steps-to-effective-code-reviews"&gt;the article I wrote&lt;/a&gt; for the &lt;a href="http://challengepost.com"&gt;ChallengePost&lt;/a&gt; blog this month: &lt;a href="http://blog.challengepost.com/post/77811098097/three-steps-to-effective-code-reviews"&gt;Three Steps to Effective Code Reviews&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ruby, You Autocomplete Me</title>
    <link rel="alternate" href="/blog/2014/02/ruby,-you-autocomplete-me.html"/>
    <id>/blog/2014/02/ruby,-you-autocomplete-me.html</id>
    <published>2014-02-05T00:00:00Z</published>
    <updated>2014-02-05T00:00:00Z</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;My team recently added a tagging feature to our web app. As the user types in
the text input, the app supplies autocomplete suggestions from our database via
javascript; a familiar UX. While backporting tags to existing records on the
&lt;code&gt;rails console&lt;/code&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;My team recently added a tagging feature to our web app. As the user types in
the text input, the app supplies autocomplete suggestions from our database via
javascript; a familiar UX. While backporting tags to existing records on the
&lt;code&gt;rails console&lt;/code&gt;, it hit me: &amp;ldquo;Why not bring tag autocompletion to the command
line?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The default &lt;code&gt;rails console&lt;/code&gt; provides completion out-of-the-box though all the script
does is start &lt;code&gt;irb&lt;/code&gt; with the rails environment and &lt;code&gt;irb/completion&lt;/code&gt; required.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;#!/usr/bin/env ruby
require File.expand_path(&amp;#39;../../load_paths&amp;#39;, __FILE__)
require &amp;#39;rails/all&amp;#39;
require &amp;#39;active_support/all&amp;#39;
require &amp;#39;irb&amp;#39;
require &amp;#39;irb/completion&amp;#39;
IRB.start

# from https://github.com/rails/rails/blob/master/tools/console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Turns out that all &lt;code&gt;irb/completion&lt;/code&gt; does is configure the ruby interface to the
&lt;a href="http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html"&gt;GNU Readline Library&lt;/a&gt;.
This is done with the ruby &lt;a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/readline/rdoc/Readline.html"&gt;Readline&lt;/a&gt;
module. &lt;code&gt;Readline&lt;/code&gt; accepts a &lt;code&gt;proc&lt;/code&gt; that determines completion behavior by returning an array of string
candidates given an input string triggered, typically, by pressing &lt;code&gt;TAB&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;From &lt;code&gt;irb/completion&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;if Readline.respond_to?(&amp;quot;basic_word_break_characters=&amp;quot;)
#  Readline.basic_word_break_characters= &amp;quot; \t\n\&amp;quot;\\&amp;#39;`&amp;gt;&amp;lt;=;|&amp;amp;{(&amp;quot;
  Readline.basic_word_break_characters= &amp;quot; \t\n`&amp;gt;&amp;lt;=;|&amp;amp;{(&amp;quot;
end
Readline.completion_append_character = nil
Readline.completion_proc = IRB::InputCompletor::CompletionProc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;IRB::InputCompletor::CompletionProc&lt;/code&gt; is a proc that evaluates a large case
statement of regular expressions that attempt to determine the type of given
object and provide a set of candidates to match, such as &lt;code&gt;String&lt;/code&gt; instance methods when
the input matches &lt;code&gt;$r{^(([&amp;quot;&amp;#39;]).*\2)\.([^.]*)$}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To give &lt;code&gt;Readline&lt;/code&gt; a spin, fire up &lt;code&gt;irb&lt;/code&gt; and paste in the following example, borrowed
from the &lt;a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/readline/rdoc/Readline.html"&gt;ruby docs&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;require &amp;#39;readline&amp;#39;

LIST = [
  &amp;#39;search&amp;#39;, &amp;#39;download&amp;#39;, &amp;#39;open&amp;#39;,
  &amp;#39;help&amp;#39;, &amp;#39;history&amp;#39;, &amp;#39;quit&amp;#39;,
  &amp;#39;url&amp;#39;, &amp;#39;next&amp;#39;, &amp;#39;clear&amp;#39;,
  &amp;#39;prev&amp;#39;, &amp;#39;past&amp;#39;
].sort

comp = proc { |s| LIST.grep(/^#{Regexp.escape(s)}/) }

Readline.completion_append_character = &amp;quot; &amp;quot;
Readline.completion_proc = comp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;#39;s nothing stopping us from taking this to the &lt;code&gt;rails console&lt;/code&gt; to take
advantage of our rails environment and even access the database. Building off
the example, we can replace the hard-coded array with a list of tags plucked
from a simple activerecord query:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;require &amp;#39;readline&amp;#39;

comp = proc { |s| ActsAsTaggableOn::Tag.named_like(s).pluck(:name) }

Readline.completion_proc = comp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have room for improvement. For one thing, this makes a new query every time
you attempt to autocomplete. For a reasonable number of tags, we could load the
tag list in memory and grep for the matches instead. There is still another problem;
by replacing the &lt;code&gt;Readline.completion_proc&lt;/code&gt;, we&amp;#39;ve clobbered the functionality
provided by &lt;code&gt;irb/completion&lt;/code&gt;. One approach would be to fall back to the
&lt;code&gt;IRB::InputCompletor::CompletionProc&lt;/code&gt; or add its result to the array of candidates.
Given IRB has documented, &lt;a href="https://github.com/cldwalker/bond#irbs-incorrect-completions"&gt;incorrect completions&lt;/a&gt;
(try completing methods on a proc) and no built-in support for extending completion behavior,
this could get messy.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href="https://github.com/cldwalker/bond"&gt;bond&lt;/a&gt;, a drop-in replacement for IRB
completion. It aims to improve on IRB&amp;#39;s shortcomings and provides methods for
adding custom completions. To take advantage of Bond in the console:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;require &amp;#39;bond&amp;#39;
Bond.start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bond allows you to extend the strategies for autocompleting text with &lt;a href="https://github.com/cldwalker/bond/blob/master/lib/bond.rb#L21"&gt;the
&lt;code&gt;Bond.completion&lt;/code&gt; method&lt;/a&gt;.
To set up a Bond completion, we need a condition and an action; when the condition is matched,
then the given action will determine which candidates are returned. Calling
&lt;code&gt;Bond.start&lt;/code&gt; will register Bond&amp;#39;s default completions. For example, the
following completion is triggered with the text for completion starts with a
letter preceded by &amp;ldquo;::&amp;rdquo;; the search space is scoped to &lt;code&gt;Object.constants&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# https://github.com/cldwalker/bond/blob/master/lib/bond/completion.rb#L13
complete(:prefix=&amp;gt;&amp;#39;::&amp;#39;, :anywhere=&amp;gt;&amp;#39;[A-Z][^:\.\(]*&amp;#39;) {|e| Object.constants }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add tag autocompletion whenever we start a new string, we could use the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;include Bond::Search # provides methods to search lists

TAG_NAMES = ActsAsTaggableOn::Tag.pluck(:name) # load tag names in memory

Bond.complete(:name=&amp;gt;:tags, prefix: &amp;#39;&amp;quot;&amp;#39;, :anywhere=&amp;gt;&amp;#39;([A-Z][^,]*)&amp;#39;) {|e|
  tag = e.matched[2]
  normal_search(tag, TAG_NAMES)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Boom! Now we when autocomplete with some text inside an open double-quote, matching
tags from the database appear on the console.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;irb(main)&amp;gt; &amp;quot;Face[TAB]
Face++                     Facebook Graph             FaceCash
Face.com                   Facebook Graph API         FaceDetection
Facebook                   Facebook Opengraph         Facelets
Facebook Ads               Facebook Real-time Updates Faces.com
Facebook Chat              Facebook SDK               Facetly
Facebook Credits           Facebook Social Plugins
irb(main)&amp;gt; &amp;quot;Facebook&amp;quot;, &amp;quot;Twit[TAB]
Twitcher          TwitLonger        Twitter           Twitter Streaming Twitxr
TwitchTV          TwitPic           Twitter API       TwitterBrite
TwitDoc           TwitrPix          Twitter Bootstrap TwitterCounter
Twitgoo           Twitscoop         Twitter Grader    Twittervision
Twitlbl           TwitSprout        Twitter Oauth     Twitvid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even though we ended up leveraging an existing gem, digging into the
Ruby standard library source code proved to be a useful exercise, revealing some
simple ways to hook into features easily taken for granted.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Automatic Backups to Amazon S3 are Easy</title>
    <link rel="alternate" href="/blog/2014/02/automatic-backups-to-amazon-s3-are-easy.html"/>
    <id>/blog/2014/02/automatic-backups-to-amazon-s3-are-easy.html</id>
    <published>2014-02-01T00:00:00Z</published>
    <updated>2014-02-01T00:00:00Z</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;You have good reason to backup your files. Amazon S3 is a cost-effective storage option. It doesn't take the place of a dedicated drive that you own, it can be useful for redundancy nonetheless. With a few easy command-line steps (plus some pre-requisites...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;You have good reason to backup your files. Amazon S3 is a cost-effective storage option. It doesn&amp;#39;t take the place of a dedicated drive that you own, it can be useful for redundancy nonetheless. With a few easy command-line steps (plus some pre-requisites), you can set up your machine to automate backups to S3 in no time.&lt;/p&gt;

&lt;h2&gt;Pre-requisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;An &lt;a href="http://aws.amazon.com/"&gt;Amazon web services account&lt;/a&gt; and &lt;a href="http://aws.amazon.com/iam/"&gt;your Amazon access credentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s3cmd&lt;/code&gt;: command line interface to S3.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cron&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;cron&lt;/code&gt; is pretty standard on unix-based systems. As of this writing, &lt;code&gt;s3cmd&lt;/code&gt; should be straightforward:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Mac users
$ brew install s3cmd

# Linux
$ yum install s3cmd
# or
$ apt-get install s3cmd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Optional:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gpg&lt;/code&gt;: opensource encryption program&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Setup&lt;/h2&gt;

&lt;p&gt;First you&amp;#39;ll need to configure s3cmd: &lt;code&gt;s3cmd --configure&lt;/code&gt;. Have your Amazon access key and secret key at the ready.&lt;/p&gt;

&lt;p&gt;If you plan to store sensitive data on S3, enter the path to your &lt;code&gt;gpg&lt;/code&gt; executable; &lt;code&gt;s3cmd&lt;/code&gt; will encrypt your data before transferring from your machine to S3. It also decrypts when downloading to your machine. Keep in mind, encrypted files won&amp;#39;t be readable by others with direct access.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a sample result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ s3cmd --configure

Enter new values or accept defaults in brackets with Enter.
Refer to user manual for detailed description of all options.

Access key and Secret key are your identifiers for Amazon S3
Access Key: xxxxxxxxxxxxxxxxxxxx
Secret Key: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

Encryption password is used to protect your files from reading
by unauthorized persons while in transfer to S3
Encryption password: xxxxxxxxxx
Path to GPG program: /usr/local/bin/gpg

When using secure HTTPS protocol all communication with Amazon S3
servers is protected from 3rd party eavesdropping. This method is
slower than plain HTTP and can&amp;#39;t be used if you&amp;#39;re behind a proxy
Use HTTPS protocol [No]: Yes

New settings:
  Access Key: xxxxxxxxxxxxxxxxxxxx
  Secret Key: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  Encryption password: xxxxxxxxxx
  Path to GPG program: /usr/local/bin/gpg
  Use HTTPS protocol: True
  HTTP Proxy server name:
  HTTP Proxy server port: 0

Test access with supplied credentials? [Y/n] Y
Please wait...
Success. Your access key and secret key worked fine :-)

Now verifying that encryption works...
Success. Encryption and decryption worked fine :-)

Save settings? [y/N] y
Configuration saved to &amp;#39;$HOME/.s3cfg&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Backup&lt;/h2&gt;

&lt;p&gt;Now all you need is a file to backup and an S3 bucket to store it.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say you&amp;#39;re a web developer like me and you want to back up your MySQL or Postgres development data. First, generate the backup file (you may need to add database credentials command-line options, of course):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mysql
$ mysqldump my_app_development &amp;gt; backup-`date +%Y-%m-%d`.sql

# or postgres
$ pg_dump my_app_development &amp;gt; backup-`date +%Y-%m-%d`.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use &lt;code&gt;s3cmd&lt;/code&gt; to create a bucket. This is essentially a top-level directory in your S3 account. Since bucket names must be using to &lt;em&gt;all&lt;/em&gt; S3 users, you won&amp;#39;t be able to call it something like &amp;ldquo;backups&amp;rdquo;. It&amp;#39;s helpful to use a prefix like your email or handle.&lt;/p&gt;

&lt;p&gt;Creates an S3 bucket called &amp;#39;myname-backups&amp;#39;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ s3cmd mb s3://myname-backups
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you&amp;#39;re ready to deliver. Encrypt and send your sql dump file to your new S3 bucket:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ s3cmd put backup-2014-02-01.sql s3://myname-backups/backup-2014-02-01.sql --encrypt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can verify it&amp;#39;s in the bucket:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ s3cmd ls s3://myname-backups/
2014-02-01 22:32   1109702   s3://myname-backups/test/backup-2014-02-01.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And retrieve it (with automatic decryption when performed on your machine):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s3cmd get s3://myname-backups/backup-2014-02-01.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;s3cmd&lt;/code&gt; supports a wide range of configuration options beyond those entered during the setup phase.Once set, your global configuration is editable in your &lt;code&gt;.s3cfg&lt;/code&gt; file, typically saved in your home directory. You can also set options at the command line.&lt;/p&gt;

&lt;h2&gt;Automate&lt;/h2&gt;

&lt;p&gt;Backups are all good but performing backups on a regular basis is even better. Like saving money, to get done when automated. Let&amp;#39;s add a cron task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash

TIMESTAMP=$(date +%Y-%m-%d)
TEMP_FILE=$(mktemp tmp.XXXXXXXXXX)
S3_FILE=&amp;quot;s3://myname-backups/local/data/backup-$TIMESTAMP&amp;quot;
pg_dump directory_development &amp;gt; $TEMP_FILE
s3cmd put $TEMP_FILE $S3_FILE --encrypt
rm &amp;quot;$TEMP_FILE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save this in a directory for your local scripts, like &lt;code&gt;$HOME/bin/database_backup.sh&lt;/code&gt; and add execute permissions with &lt;code&gt;chmod +x ~/bin/database_backup.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To edit your crontab, &lt;code&gt;crontab -e&lt;/code&gt;, and set it to run everyday at 10PM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Backup database to S3 daily
* 22 * * * /Users/myname/bin/database_backup.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Easy, right?&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Featured Post for Speed Awareness Month</title>
    <link rel="alternate" href="/blog/2013/08/featured-post-for-speed-awareness-month.html"/>
    <id>/blog/2013/08/featured-post-for-speed-awareness-month.html</id>
    <published>2013-08-26T00:00:00Z</published>
    <updated>2013-08-26T00:00:00Z</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;Check out my contribution to &lt;a href="http://www.speedawarenessmonth.com/"&gt;Speed Awareness Month&lt;/a&gt; to help make the web a faster place where I &lt;a href="http://www.speedawarenessmonth.com/speeding-up-asset-delivery-from-your-rails-app/"&gt;share tips to improve delivery of static assets&lt;/a&gt;, like images, stylesheets, and javascript files, by serving from a cookie-free domain to reduce bandwidth...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Check out my contribution to &lt;a href="http://www.speedawarenessmonth.com/"&gt;Speed Awareness Month&lt;/a&gt; to help make the web a faster place where I &lt;a href="http://www.speedawarenessmonth.com/speeding-up-asset-delivery-from-your-rails-app/"&gt;share tips to improve delivery of static assets&lt;/a&gt;, like images, stylesheets, and javascript files, by serving from a cookie-free domain to reduce bandwidth and levaraging CDN pull zones to improve delivery times.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Configuring Rack Test Driver in Capybara 2</title>
    <link rel="alternate" href="/blog/2013/03/configuring-rack-test-driver-in-capybara-2.html"/>
    <id>/blog/2013/03/configuring-rack-test-driver-in-capybara-2.html</id>
    <published>2013-03-26T00:00:00Z</published>
    <updated>2013-03-26T00:00:00Z</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;Though I don't recommend excessive redirects, sometimes you need more than 5 in your Capybara specs; this is the default redirect limit for &lt;a href="https://github.com/jnicklas/capybara"&gt;Capybara&lt;/a&gt;. When you exceed this limit, you get a dreaded &lt;code&gt;Capybara::InfiniteRedirectError&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In Capybara 2.0+,...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Though I don&amp;#39;t recommend excessive redirects, sometimes you need more than 5 in your Capybara specs; this is the default redirect limit for &lt;a href="https://github.com/jnicklas/capybara"&gt;Capybara&lt;/a&gt;. When you exceed this limit, you get a dreaded &lt;code&gt;Capybara::InfiniteRedirectError&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In Capybara 2.0+, this limit is configurable:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;Capybara.register_driver :rack_test do |app|
  Capybara::RackTest::Driver.new app, \
    redirect_limit: 15,
    follow_redirects: true,
    respect_data_method: true
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Register a new instance of the rack test driver with options, as shown above. If you&amp;#39;re on Rails, it may be necessary for you to set &lt;code&gt;:respect_data_method&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;; this instructs capybara to simulate the request method specified via data-method attributes in your link. With Rails, an extension like &lt;a href="https://github.com/rails/jquery-ujs"&gt;rails/jquery-ujs&lt;/a&gt; allows you to enable additional request methods via unobtrusive javascript in real browsers. This setting currently defaults to false in the RackTest driver; one of the primary configurations in &lt;a href="https://github.com/jnicklas/capybara/blob/master/lib/capybara/rails.rb"&gt;&lt;code&gt;capybara/rails&lt;/code&gt;&lt;/a&gt; is to set this option. So&amp;hellip; you may be surprised if you omit this option and suddenly get missing route exceptions in your specs.&lt;/p&gt;

&lt;p&gt;The best long term solution for you and your users is to figure out how to reduce or eliminate unnecessary redirects. Playing with the redirect limit in your test environment may be a good way to identify potential problem areas of your app.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Why I Ditched Wordpress for Github</title>
    <link rel="alternate" href="/blog/2013/03/why-i-ditched-wordpress-for-github.html"/>
    <id>/blog/2013/03/why-i-ditched-wordpress-for-github.html</id>
    <published>2013-03-25T00:00:00Z</published>
    <updated>2013-03-25T00:00:00Z</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;By statistics alone, Wordpress is a winner. According to the &lt;a href="http://en.wikipedia.org/wiki/WordPress"&gt;stats on Wikipedia&lt;/a&gt;, it is a clear favorite amongst the top and new websites worldwide. The sheer volume of options for plugins, themes and customizations are enough to make it worthwhile...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;By statistics alone, Wordpress is a winner. According to the &lt;a href="http://en.wikipedia.org/wiki/WordPress"&gt;stats on Wikipedia&lt;/a&gt;, it is a clear favorite amongst the top and new websites worldwide. The sheer volume of options for plugins, themes and customizations are enough to make it worthwhile as a content platform; the admin tools make editing and publishing a breeze.&lt;/p&gt;

&lt;p&gt;And yet, yesterday, I ditched Wordpress. This site is now hosted on &lt;a href="http://pages.github.com/"&gt;Github Pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So why switch? There are a few reasons. For one, site performance benefits of Pages over Wordpress have been &lt;a href="http://mbmccormick.com/2011/10/ditching-wordpress-for-jekyll-and-github/"&gt;well-documented&lt;/a&gt;. Now I don&amp;#39;t have to worry about &lt;a href="http://go.janleow.com/2011/06/my-wordpress-website-in-bluehost-is.html"&gt;Bluehost suspending my service&lt;/a&gt; anymore. Pages is free. There&amp;#39;s also my personal distaste for PHP, though it hasn&amp;#39;t stopped me from hacking on my pages here and there.&lt;/p&gt;

&lt;p&gt;There is, however, a more fundamental reason, illustrated when I ran into a close friend recently. My friend is brilliant and well-regarded in his field (finance). When he remarked on that fact that I had built my own website, my first thought was &amp;ldquo;Well, not really&amp;hellip;&amp;rdquo;, though I said something more like &amp;ldquo;Thanks!&amp;rdquo; My friend and most people don&amp;#39;t care if a website runs on Wordpress, Django, .Net or C#&amp;hellip; but I do. If the general sentiment on Hacker News is any indication, most developers care as well. Many of us got into programming because we saw something that amazed us and we desperately wanted to know &lt;em&gt;how&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To host on Github Pages means for me &lt;a href="https://help.github.com/articles/creating-project-pages-manually"&gt;using git&lt;/a&gt;, hand-crafting html and writing markdown in my editor of choice, building with &lt;a href="http://jekyllrb.com/"&gt;tools&lt;/a&gt; written in languages I love, and rolling my own theme built on &lt;a href="http://foundation.zurb.com/"&gt;CSS frameworks&lt;/a&gt; I like. It&amp;#39;s a better representation of what I do and how I prefer to do it. Using Wordpress has always felt a bit disingenuous. And that&amp;#39;s why I made the change.&lt;/p&gt;
</content>
  </entry>
</feed>
